generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  isMfaEnabled  Boolean   @default(false)
  deletedAt     DateTime?

  role   UserRole      @default(CONSUMER)
  status AccountStatus @default(ACTIVE)

  accounts      Account[]
  sessions      Session[]
  mfaDevices    MfaDevice[]
  recoveryCodes RecoveryCode[]
  
  // Team relationships
  teamMembers      TeamMember[]
  teamInvitations  TeamInvitation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deletedAt])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  ipAddress String?
  userAgent String?

  country       String?
  countryCode   String?
  continent     String?
  continentCode String?
  region        String?
  regionCode    String?
  city          String?
  latitude      Float?
  longitude     Float?
  postalCode    String?
  timezone      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([token])
}

model MfaDevice {
  id     String @id @default(cuid())
  userId String
  name   String
  secret String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model RecoveryCode {
  id     String  @id @default(cuid())
  userId String
  code   String
  isUsed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
  @@index([userId])
}

// ============================================
// TEAM MANAGEMENT MODELS
// ============================================

model Team {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  icon        String  @default("Users")
  
  members     TeamMember[]
  invitations TeamInvitation[]
  projects    Project[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([slug])
}

model TeamMember {
  id     String @id @default(cuid())
  teamId String
  userId String
  role   TeamRole @default(MEMBER)
  
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([teamId, userId]) // User can only be in a team once
  @@index([teamId])
  @@index([userId])
}

model TeamInvitation {
  id        String           @id @default(cuid())
  teamId    String
  email     String
  role      TeamRole         @default(MEMBER)
  token     String           @unique
  status    InvitationStatus @default(PENDING)
  expiresAt DateTime
  
  invitedBy String // User ID of who sent the invitation
  
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([teamId])
  @@index([email])
  @@index([token])
}

// ============================================
// PROJECT & MODEL DEPLOYMENT MODELS
// ============================================

model Project {
  id          String  @id @default(cuid())
  name        String
  slug        String  // URL-friendly identifier (unique within team)
  description String?
  teamId      String
  
  visibility ProjectVisibility @default(PRIVATE)
  status     ProjectStatus     @default(ACTIVE)
  
  team      Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  endpoints Endpoint[]
  apiKeys   ApiKey[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([teamId, slug]) // Slug unique within team
  @@index([teamId])
  @@index([slug])
}

model Endpoint {
  id          String  @id @default(cuid())
  projectId   String
  name        String
  description String?
  
  // Model configuration
  modelFramework ModelFramework // TensorFlow, PyTorch, ONNX, etc.
  modelVersion   String
  modelPath      String         // Storage path to the model file
  
  // Deployment configuration
  deploymentStatus DeploymentStatus @default(PENDING)
  containerImage   String?          // Docker image reference
  apiEndpoint      String?          @unique // Generated API URL
  
  // Resource configuration
  cpuLimit    Float?  @default(1.0) // CPU cores
  memoryLimit Int?    @default(2048) // Memory in MB
  gpuEnabled  Boolean @default(false)
  
  // Pricing & access
  accessType     AccessType @default(PRIVATE)
  pricingModel   PricingModel? // null for free models
  pricePerCall   Float?        // For pay-per-call
  subscriptionFee Float?       // For subscription
  
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  usageMetrics  UsageMetric[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Soft delete
  
  @@index([projectId])
  @@index([apiEndpoint])
  @@index([deploymentStatus])
}

model ApiKey {
  id          String  @id @default(cuid())
  projectId   String
  name        String
  key         String  @unique // Hashed API key
  keyPreview  String  // First few characters for display (e.g., "sk_live_abc...")
  
  permissions ApiKeyPermission[] // Array of permissions
  
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  lastUsedAt DateTime?
  
  project Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  usage   UsageMetric[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([projectId])
  @@index([key])
}

model UsageMetric {
  id         String   @id @default(cuid())
  endpointId String
  apiKeyId   String?
  
  requestCount    Int      @default(0)
  successCount    Int      @default(0)
  errorCount      Int      @default(0)
  totalLatency    Float    @default(0) // Total response time in ms
  averageLatency  Float?   // Calculated field
  
  timestamp DateTime @default(now())
  
  endpoint Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  apiKey   ApiKey?  @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  
  @@index([endpointId])
  @@index([apiKeyId])
  @@index([timestamp])
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  ADMIN       // Platform administrators - full system access
  DEVELOPER   // Professional AI developers who upload and monetize models
  CONTRIBUTOR // Community contributors who share free/open models
  CONSUMER    // Users who consume AI models via APIs
}

enum AccountStatus {
  ACTIVE   // Normal active account
  SUSPENDED // Temporarily suspended (can be restored)
  BLOCKED  // Permanently blocked
  PENDING  // Account pending verification/approval
  INACTIVE // User deactivated their own account
}

enum TeamRole {
  OWNER  // Team creator - full control, can delete team
  ADMIN  // Can manage members, projects, and settings
  MEMBER // Can create/manage projects and deploy models
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum ProjectVisibility {
  PRIVATE // Only team members can see
  PUBLIC  // Listed publicly, anyone can view
  UNLISTED // Not listed, but accessible via direct link
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  SUSPENDED
}

enum ModelFramework {
  TENSORFLOW
  PYTORCH
  ONNX
  SCIKIT_LEARN
  HUGGINGFACE
  KERAS
  CUSTOM
}

enum DeploymentStatus {
  PENDING     // Initial state
  BUILDING    // Building container
  DEPLOYING   // Deploying to cloud
  RUNNING     // Successfully deployed and running
  FAILED      // Deployment failed
  STOPPED     // Manually stopped
  UPDATING    // Being updated to new version
}

enum AccessType {
  PRIVATE // Only accessible via API keys
  PUBLIC  // Anyone can access (rate-limited)
  PAID    // Requires payment/subscription
}

enum PricingModel {
  FREE
  PAY_PER_CALL
  SUBSCRIPTION
  TIERED // Different pricing tiers
}

enum ApiKeyPermission {
  READ      // Can call endpoints
  WRITE     // Can modify endpoint config
  ADMIN     // Full admin access
  METRICS   // Can view usage metrics
}
