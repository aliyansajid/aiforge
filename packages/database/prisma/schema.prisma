generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?

  mfaEnabled  Boolean  @default(false)
  mfaSecret   String?
  backupCodes String[]

  role   UserRole      @default(CONSUMER)
  status AccountStatus @default(ACTIVE)

  accounts   Account[]
  sessions   Session[]
  mfaDevices MfaDevice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  ipAddress String?
  userAgent String?

  country  String?
  region   String?
  city     String?
  lat      Float?
  lon      Float?
  timezone String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([token])
}

model MfaDevice {
  id       String    @id @default(cuid())
  name     String
  secret   String
  userId   String
  verified Boolean   @default(false)
  lastUsed DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  ADMIN // Platform administrators - full system access
  DEVELOPER // Professional AI developers who upload and monetize models
  CONTRIBUTOR // Community contributors who share free/open models
  CONSUMER // Users who consume AI models via APIs
}

enum AccountStatus {
  ACTIVE // Normal active account
  SUSPENDED // Temporarily suspended (can be restored)
  BLOCKED // Permanently blocked
  PENDING // Account pending verification/approval
  INACTIVE // User deactivated their own account
}
